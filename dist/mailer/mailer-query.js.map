{"version":3,"sources":["../../src/mailer/mailer-query.js"],"names":["nodemailer","require","makeMailerQuery","database","Object","freeze","add","getMessages","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToMailer","mailerId","mailer","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","transporter","createTransport","service","auth","user","pass","mailerResult","sendMail","from","to","send_to","subject","topic","text","comment","send_as","html","error","info","resolve","status","id","doc"],"mappings":"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aAAO;AACHyB,QAAAA,MAAM,EAAE,SADL;AAEHzB,QAAAA,OAAO,EAAE;AAFN,OAAP;AAIH;AAEJ;;AAED,WAAST,gBAAT,CAA2B;AAAEV,IAAAA,GAAG,EAAE6C,EAAP;AAAW,OAAGC;AAAd,GAA3B,EAAgD;AAC5C,WAAO,qBAAW;AAAED,MAAAA,EAAF;AAAM,SAAGC;AAAT,KAAX,CAAP;AACD;AAEN,C,CAUD;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA","sourcesContent":["const nodemailer = require('nodemailer');\n//const sgMail = require('@sendgrid/mail')\n\nimport makeMailer from './mailer'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeMailerQuery({database}){\n    return Object.freeze({\n        add,\n        getMessages\n    });\n\n    async function getMessages ({ max = 200000, before, after } = {}) {\n        \n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n  \n        return (await db\n        .collection('Messages')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToMailer)\n      }\n   \n    async function add ({ mailerId, ...mailer }) {\n        const db = await database\n        if (mailerId) {\n          mailer._id = db.makeId(mailerId)\n        }\n        const { result, ops } = await db\n          .collection('Messages')\n          .insertOne(mailer)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                \n              )\n            }\n            throw mongoError\n          })\n          \n        const transporter = nodemailer.createTransport({\n            service: 'gmail',\n            auth: {\n            user: 'thenaccproject@gmail.com',//'masterislamproject@gmail.com',\n            pass: 'uwumygrocoicpiwy', //'lxoawljozobqbmuo',\n            },\n        });\n\n        const mailerResult = transporter.sendMail({\n            from:  '\"NACC Admin\" <thenaccproject@gmail.com>', // sender address\n            to: mailer.send_to, // list of receivers\n            subject: mailer.topic, // Subject line\n            text: mailer.comment+\"<br><br>\"+mailer.send_as, // plain text body\n            html: mailer.comment+\"<br><br>\"+mailer.send_as, // html body\n            }, function(error, info){\n                if (error) {\n                resolve(false); // or use rejcet(false) but then you will have to handle errors\n                } \n            else {\n                resolve(true);\n                }\n            });\n        \n        if (mailerResult == false){\n\n            return {\n                status: \"error\",\n                message: \"Mail not sent\"\n            }\n        }\n        else {\n            return {\n                status: \"success\",\n                message: \"Mail sent\"\n            }\n        }\n\n    }\n\n    function documentToMailer ({ _id: id, ...doc }) {\n        return makeMailer({ id, ...doc })\n      }\n\n}\n\n\n\n\n\n\n\n\n\n// //import makeHttpError from '../helpers/http-error';\n\n// const nodemailer = require('nodemailer');\n\n// const sgMail = require('@sendgrid/mail')\n\n// export default function makeQuery () {\n\n//     return async function handle(httpRequest){\n//         let resp = await getMailer(httpRequest);\n//         if(resp == true){\n//             return {\n//                 headers: {\n//                   'Content-Type': 'application/json'\n//                 },\n//                 statusCode: 200,\n//                 data: JSON.stringify(resp)\n//               }\n//         }\n//         else {\n//             return makeHttpError({\n//                 errorMessage: e.message,\n//                 statusCode:\n//                   e instanceof UniqueConstraintError\n//                     ? 409\n//                     : e instanceof InvalidPropertyError ||\n//                       e instanceof RequiredParameterError\n//                       ? 400\n//                       : 500\n//               })\n//         }\n        \n//     }\n\n//     async function getMailer (httpRequest) {\n//         return new Promise((resolve,reject)=>{\n//             let msgInfo = httpRequest.body\n            \n//             if (!msgInfo) {\n//                 return makeHttpError({\n//                 statusCode: 400,\n//                 errorMessage: 'Bad request. No POST body.'\n//                 })\n//             }\n\n//             if (typeof httpRequest.body === 'string') {\n//                 try {\n//                     msgInfo = JSON.parse(msgInfo)\n//                 } catch {\n//                 return makeHttpError({\n//                     statusCode: 400,\n//                     errorMessage: 'Bad request. POST body must be valid JSON.'\n//                 })\n//                 }\n//             }\n    \n            \n\n            \n//             const transporter = nodemailer.createTransport({\n//                 service: 'gmail',\n//                 auth: {\n//                 user: 'masterislamproject@gmail.com',\n//                 pass: '!123MasterIslam',\n//                 },\n//             });\n\n           \n\n//             const template = `<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n//             <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-GB\">\n//             <head>\n//                 <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n//                 <title>Wonder Double Season Greetings</title>\n//                 <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n            \n               \n//             </head>\n//             <body style=\"margin: 0; padding: 0;\">\n//                 <table role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n//                     <tr>\n//                         <td align=\"center\" bgcolor=\"#edebea\">\n//                         <p style=\"color:#343c64; font-size:14px;\">&copy Wongafix 2021</p>\n//                         </td>\n//                     </tr>\n//                 </table>\n//             </body>\n//             </html>`;\n\n            \n\n//            transporter.sendMail({\n//                 from:  '\"MasterIslam\" <masterislam@gmail.com>', // sender address\n//                 to: msgInfo.email, // list of receivers\n//                 subject: msgInfo.topic, // Subject line\n//                 text: msgInfo.message, // plain text body\n//                 html: msgInfo.message, // html body\n//                 }, function(error, info){\n//                     if (error) {\n//                     resolve(false); // or use rejcet(false) but then you will have to handle errors\n//                     } \n//                 else {\n//                     resolve(true);\n//                     }\n//                 });\n//         })\n//     }\n \n\n    \n// }"],"file":"mailer-query.js"}