{"version":3,"sources":["../../src/subscribers/subscribers-query.js"],"names":["makeSubscribersQuery","database","Object","freeze","add","update","findById","getSubscribers","deleteById","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToSubscribers","subscriberId","subscribers","date","Date","toISOString","insertOne","then","result","message","status","insertedId","catch","mongoError","errorCode","split","_","mongoIndex","UniqueConstraintError","id","subscriber","newSet","$set","category","company","address","contact_person","phone","email","business_activities","updateOne","upsert","found","findOne","deleteMany","success","n","doc"],"mappings":"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","sourcesContent":["import makeSubscribers from './subscribers'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeSubscribersQuery({database}){\n    return Object.freeze({\n        add,\n        update,\n        findById,\n        getSubscribers,\n        deleteById\n    });\n\n    async function getSubscribers ({ max = 200000, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Subscribers')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToSubscribers)\n    }\n\n\n    async function add ({ subscriberId, ...subscribers }) {\n\n      let date = new Date()\n      subscribers.date = date.toISOString()\n\n        const db = await database\n        if (subscriberId) {\n          subscribers._id = db.makeId(subscriberId)\n        }\n\n        return db.collection(\"Subscribers\") \n          .insertOne(subscribers)\n          .then(result => {\n            // return {\n            //   success: result.ok === 1,\n            //   id: result.insertedId\n            //   }\n            return {\n              message: \"Success\",\n              status: result.insertedId\n            };\n        }).catch(mongoError => {\n          const [errorCode] = mongoError.message.split(' ')\n              if (errorCode === 'E11000') {\n                const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n                throw new UniqueConstraintError(\n                  //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n                )\n              }\n              throw mongoError\n        });\n\n    }\n\n  async function update ({ id, ...subscriber}) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n      \n      const newSet = {\n        $set : {\n\n          category: subscriber.category,\n          company: subscriber.company,\n          address: subscriber.address,\n          contact_person: subscriber.contact_person,\n          phone: subscriber.phone,\n          email: subscriber.email,\n          business_activities: subscriber.business_activities,\n          date: subscriber.date\n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Subscribers')\n        .updateOne(query, newSet, {upsert:true})\n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n  }\n\n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Subscribers')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToSubscribers(found)\n    }\n    return null\n  }\n\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Subscribers').deleteMany({\"_id\": db.makeId(id)})\n    return {\n      success: result.n\n    }\n    \n  }\n\n  function documentToSubscribers ({ _id: id, ...doc }) {\n    return makeSubscribers({ id, ...doc })\n  }\n}"],"file":"subscribers-query.js"}