{"version":3,"sources":["../../src/subscribers/subscribers-endpoint.js"],"names":["makeSubscribersEndpointHandler","subscribersQuery","handle","httpRequest","method","postSubscribers","getSubscribers","updateSubscribers","deleteSubscribers","statusCode","errorMessage","id","queryParams","max","before","after","undefined","result","findById","headers","data","JSON","stringify","subInfo","body","parse","subscriber","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","deleteById"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeSubscribers from './subscribers';\n\nexport default function makeSubscribersEndpointHandler({subscribersQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postSubscribers(httpRequest)\n      \n            case 'GET':\n              return getSubscribers(httpRequest)\n\n            case 'PUT':\n              return updateSubscribers(httpRequest)\n      \n            case 'DELETE':\n              return deleteSubscribers(httpRequest)\n\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getSubscribers (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (id !== undefined ){\n        const result = await subscribersQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await subscribersQuery.getSubscribers({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n    async function postSubscribers (httpRequest) {\n        let subInfo = httpRequest.body\n        if (!subInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            subInfo = JSON.parse(subInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          \n          const subscriber = makeSubscribers(subInfo)\n          const result = await subscribersQuery.add(subscriber)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n          \n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n  async function updateSubscribers(httpRequest) {\n    \n    let subInfo = httpRequest.body\n    \n    if (!subInfo) {\n      return makeHttpError({\n        statusCode: 400,\n        errorMessage: 'Bad request. No POST body.'\n      })\n    }\n\n    if (typeof httpRequest.body === 'string') {\n      try {\n        subInfo = JSON.parse(subInfo)\n      } catch {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. POST body must be valid JSON.'\n        })\n      }\n    }\n\n    try {\n      \n      const subscriber = makeSubscribers(subInfo);\n      const result = await subscribersQuery.update(subscriber)\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 201,\n        data: JSON.stringify(result)\n      }\n    } catch (e) {\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n    }\n  }\n\n  async function deleteSubscribers (httpRequest) {\n    const { id } = httpRequest.queryParams || {}\n     \n    try {\n      const result = await subscribersQuery.deleteById({ id })\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n    }\n    catch (e){\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n\n    }\n  }\n\n}"],"file":"subscribers-endpoint.js"}