{"version":3,"sources":["../../src/auth/auth-query.js"],"names":["require","config","jwt","bcrypt","makeAuthQuery","database","Object","freeze","findByHeader","checkToken","token","console","log","decoded","verify","split","process","env","JWT_SECRET","email","db","found","collection","findOne","decode_email","status","message","error"],"mappings":";;;;;;;AACA;;AACA;;;;AAFAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAIA,MAAMC,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEe,SAASI,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAkC;AAC7C,SAAOC,MAAM,CAACC,MAAP,CAAc;AACnBC,IAAAA,YADmB;AAEnBC,IAAAA;AAFmB,GAAd,CAAP;;AAKA,iBAAeD,YAAf,CAA4BE,KAA5B,EAAmC;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAUF,KAAtB;AACM,UAAMG,OAAO,GAAGX,GAAG,CAACY,MAAJ,CAAWJ,KAAK,CAACK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAX,EAAgCC,OAAO,CAACC,GAAR,CAAYC,UAA5C,CAAhB;AACA,UAAMC,KAAK,GAAGN,OAAO,CAACM,KAAtB;AAEA,UAAMC,EAAE,GAAG,MAAMf,QAAjB;AACA,UAAMgB,KAAK,GAAG,MAAMD,EAAE,CACnBE,UADiB,CACN,OADM,EAEjBC,OAFiB,CAET;AAAEJ,MAAAA,KAAK,EAAEA;AAAT,KAFS,CAApB;;AAIA,QAAIE,KAAJ,EAAW;AACT,aAAOA,KAAP;AACD,KAFD,MAGK;AACH,aAAO,OAAP;AACD;AAEF;;AAED,iBAAeZ,UAAf,CAA2BC,KAA3B,EAAkCS,KAAlC,EAAyC;AAEvC,QAAI;AAEF,YAAMN,OAAO,GAAGX,GAAG,CAACY,MAAJ,CAAWJ,KAAK,CAACK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAX,EAAgCC,OAAO,CAACC,GAAR,CAAYC,UAA5C,CAAhB;AACA,YAAMM,YAAY,GAAGX,OAAO,CAACM,KAA7B,CAHE,CAKF;AACA;AACA;AACA;;AAEA,UAAIK,YAAY,IAAIL,KAApB,EAA2B;AACzB,eAAO;AACLM,UAAAA,MAAM,EAAE,GADH;AAELC,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID,OALD,MAMK;AACH,eAAO;AACLD,UAAAA,MAAM,EAAE,GADH;AAELC,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;AAEF,KAvBD,CAuBE,OAAOC,KAAP,EAAc;AACd,aAAO;AACLF,QAAAA,MAAM,EAAE,GADH;AAELC,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;AAGF;AAGJ","sourcesContent":["require('dotenv').config();\nimport makeAuth from './auth'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\nexport default function makeAuthQuery({database}){\n    return Object.freeze({\n      findByHeader,\n      checkToken\n    });\n\n    async function findByHeader(token) {\nconsole.log(\"token: \"+token)\n      const decoded = jwt.verify(token.split(' ')[1], process.env.JWT_SECRET)\n      const email = decoded.email\n  \n      const db = await database\n      const found = await db\n        .collection('Staff')\n        .findOne({ email: email })\n  \n      if (found) {\n        return found\n      }\n      else {\n        return \"error\"\n      }\n  \n    }\n  \n    async function checkToken (token, email) {\n  \n      try {\n\n        const decoded = jwt.verify(token.split(' ')[1], process.env.JWT_SECRET)\n        const decode_email = decoded.email\n  \n        // const db = await database\n        // const found = await db\n        //   .collection('Users')\n        //   .findOne({ email: email })\n  \n        if (decode_email == email) {\n          return {\n            status: 200,\n            message: \"Token Valid\"\n          }\n        }\n        else {\n          return {\n            status: 400,\n            message: \"Token Invalid\"\n          }\n        }\n  \n      } catch (error) {\n        return {\n          status: 400,\n          message: \"Token Expired\"\n        }\n      }\n  \n      \n    }\n\n  \n}"],"file":"auth-query.js"}