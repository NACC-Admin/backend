{"version":3,"sources":["../../src/activities/activities-query.js"],"names":["makeActivitiesQuery","database","Object","freeze","add","findById","findByMonth","findByYear","findByDaynMonthnYear","getActivities","deleteById","max","before","after","console","log","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToActivities","activitiesId","activities","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","found","findOne","month","year","day","deleteOne","deletedCount","status","doc"],"mappings":"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","sourcesContent":["import makeActivities from './activities'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeActivitiesQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        findByMonth,\n        findByYear,\n        findByDaynMonthnYear,\n        getActivities,\n        deleteById\n    });\n\n    async function getActivities ({ max = 100, before, after } = {}) {\n\n      console.log((\"get activities endpoint called\"))\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Activities')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToActivities)\n    }\n\n\n    async function add ({ activitiesId, ...activities }) {\n        const db = await database\n        if (activitiesId) {\n          activities._id = db.makeId(activitiesId)\n        }\n        const { result, ops } = await db\n          .collection('Activities')\n          .insertOne(activities)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                \n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToActivities(ops[0])\n        }\n    }\n\n \n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Activities')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToActivities(found)\n    }\n    return null\n  }\n\n  async function findByMonth({ month }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Activities')\n      .find({ month: month })\n      .toArray()).map(documentToActivities)\n  }\n\n  async function findByYear({ year }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Activities')\n      .find({ year: year })\n      .toArray()).map(documentToActivities)\n  }\n\n  async function findByDaynMonthnYear({ day, month, year }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Activities')\n      .find({ day: day, month: month, year: year })\n      .toArray()).map(documentToActivities)\n  }\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Activities').deleteOne({\"_id\": db.makeId(id)})\n    if (result.deletedCount > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToActivities ({ _id: id, ...doc }) {\n    return makeActivities({ id, ...doc })\n  }\n}"],"file":"activities-query.js"}