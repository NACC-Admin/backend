{"version":3,"sources":["../../src/activities/activities-endpoint.js"],"names":["makeActivitiesEndpointHandler","activitiesQuery","handle","httpRequest","method","postActivities","getActivities","deleteActivities","statusCode","errorMessage","id","queryParams","month","year","dday","dmonth","dyear","max","before","after","undefined","day","result","findByDaynMonthnYear","headers","data","JSON","stringify","findByMonth","findByYear","findById","activitiesInfo","body","parse","activities","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","deleteById"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeActivities from './activities';\n\nexport default function makeActivitiesEndpointHandler({activitiesQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postActivities(httpRequest)\n      \n            case 'GET':\n              return getActivities(httpRequest)\n      \n            case 'DELETE':\n              return deleteActivities(httpRequest)\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getActivities (httpRequest) {\n      \n      const { id } = httpRequest.queryParams || {}\n      const { month } = httpRequest.queryParams || {}\n      const { year } = httpRequest.queryParams || {}\n      const { dday, dmonth, dyear } = httpRequest.queryParams || {} //category and password\n      const { max, before, after } = httpRequest.queryParams || {}\n      \n      if (dday !== undefined && dmonth !== undefined && dyear !== undefined){\n        const day = dday;\n        const month = dmonth;\n        const year = dyear\n\n        const result = await activitiesQuery.findByDaynMonthnYear({ day, month, year })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (month !== undefined ){\n        const result = await activitiesQuery.findByMonth({ month })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n\n      else if (year !== undefined ){\n        const result = await activitiesQuery.findByYear({ year })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      \n      else if (id !== undefined ){\n        const result = await activitiesQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await activitiesQuery.getActivities({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n    async function postActivities (httpRequest) {\n        let activitiesInfo = httpRequest.body\n        if (!activitiesInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            activitiesInfo = JSON.parse(activitiesInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const activities = makeActivities(activitiesInfo)\n          const result = await activitiesQuery.add(activities)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n    async function deleteActivities (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n  \n      try {\n        const result = await activitiesQuery.deleteById({ id })\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n\n      }\n      \n    }\n  \n\n}"],"file":"activities-endpoint.js"}